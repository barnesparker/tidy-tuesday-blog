{
  "hash": "8b9edf7d8c6fbcf6745a437a31840d59",
  "result": {
    "markdown": "---\ntitle: \"Predicting Survival Times from Alone\"\nauthor: \"Parker Barnes\"\ndate: \"2023-02-23\"\nformat: \n  html:\n    toc: true\n    code-fold: show\n    \nparams:\n  shortcut: \"true\"\n---\n\n\n![](alone.jpg)\n\n## Introduction\n\nToday I'll explore another interesting #tidytuesday data set consisting of data from the TV show *Alone*. For those not familiar with the show, 10 contestants are dropped off in a remote location in the wilderness with limited supplies. They attempt to survive for as long as they can until they tap out, and the last man standing wins a significant cash prize.\n\nThe data has its own R package. The package as well as more information about the data can be found [here](https://github.com/doehm/alone).\n\nThe goal of this analysis is to explore and model the factors that predict how long a competitor will survive.\n\n\n\n\n\n## Data Exploration\n\n### Data Ingest\n\nFirst let's import the data for our survivalists and the locations. I will be using the static data set from github since the package data changes over time and I want to avoid breaking any code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(alone)\n\ndata(survivalists)\ndata(seasons)\ndata(loadouts)\n\n# survivalists2 <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/survivalists.csv')\n# loadouts2 <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/loadouts.csv')\n# seasons2 <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/seasons.csv')\n\nsurvivalists <- \n  survivalists |> \n  filter(season <= 9, version == \"US\")\n  \nloadouts <- \n  loadouts |> \n  filter(season <= 9, version == \"US\")\n\nseasons <- \n  seasons |> \n  filter(season <= 9, version == \"US\")\n\nglimpse(survivalists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 94\nColumns: 20\n$ version             <chr> \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"U…\n$ season              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,…\n$ id                  <chr> \"US010\", \"US009\", \"US008\", \"US007\", \"US006\", \"US00…\n$ name                <chr> \"Alan Kay\", \"Sam Larson\", \"Mitch Mitchell\", \"Lucas…\n$ first_name          <chr> \"Alan\", \"Sam\", \"Mitch\", \"Lucas\", \"Dustin\", \"Brant\"…\n$ last_name           <chr> \"Kay\", \"Larson\", \"Mitchell\", \"Miller\", \"Feher\", \"M…\n$ age                 <dbl> 40, 22, 34, 32, 37, 44, 46, 24, 41, 31, 50, 44, 45…\n$ gender              <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"M…\n$ city                <chr> \"Blairsville\", \"Lincoln\", \"Bellingham\", \"Quasqueto…\n$ state               <chr> \"Georgia\", \"Nebraska\", \"Massachusetts\", \"Iowa\", \"P…\n$ country             <chr> \"United States\", \"United States\", \"United States\",…\n$ result              <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7…\n$ days_lasted         <dbl> 56, 55, 43, 39, 8, 6, 4, 4, 1, 0, 66, 64, 59, 57, …\n$ medically_evacuated <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ reason_tapped_out   <chr> NA, \"Lost the mind game\", \"Realized he should actu…\n$ reason_category     <chr> NA, \"Personal\", \"Personal\", \"Personal\", \"Personal\"…\n$ episode_tapped      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 2, 1, NA, NA, NA, …\n$ team                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ day_linked_up       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ profession          <chr> \"Corrections Officer\", \"Outdoor Gear Retailer\", \"B…\n```\n:::\n:::\n\n\n\n\n`days_lasted` is the variable we are most interested in and the one we will try to predict. Furthermore, we aren't interested in any variable that isn't known at the start of the season (i.e. `reason_tapped_out`)\n\n### Gender\n\nHow many men vs. women have attempted the show?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> count(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  gender     n\n  <chr>  <int>\n1 Female    20\n2 Male      74\n```\n:::\n:::\n\n\nLooks like there are about 4 times as many men as there are women. How do men and women compare in their survival times?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  ggplot(aes(gender, days_lasted)) +\n  geom_boxplot(aes(fill = gender), show.legend = F) +\n  geom_jitter(width = .2, height = 0) +\n  coord_flip() +\n  labs(x = NULL, y = \"Days Lasted\", fill = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWomen in this show appear to have a slight survival advantage.\n\n### Location\n\nHow do survival times compare by season and location?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  left_join(seasons |> select(season, location)) |> \n  mutate(season = fct_reorder(factor(season), -season)) |> \n  ggplot(aes(season, days_lasted, fill = location)) +\n  geom_boxplot(alpha = .5) +\n  geom_jitter(width = .2, height = 0) +\n  coord_flip() +\n  labs(x = \"Season\", y = \"Days Lasted\", fill = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIf you look closely, you'll notice that season 4 competitors drop out in pairs. That's because the competitors were put in teams in this season. We'll be sure to account for that when we model.\n\nFinally, let's compare gender survival times by location\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  left_join(seasons |> select(season, location)) |> \n  ggplot(aes(location, days_lasted, fill = gender)) +\n  geom_boxplot(alpha = .5) +\n  geom_jitter(aes(color = gender), width = .2, height = 0, show.legend = F) +\n  coord_flip() +\n  labs(x = NULL, y = \"Days Lasted\", fill = NULL, color = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nFor some locations, women greatly out-survive men. Others, not so much.\n\n### Age\n\nHow does age correlate with survival?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  ggplot(aes(age, days_lasted, color = gender)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", lty = 2) +\n  labs(x = \"Age\", y = \"Days Lasted\", color = NULL) +\n  ggpubr::stat_cor(show.legend = F) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThere doesn't appear to be an age effect.\n\n### Items\n\nLet's import one more data set that consists of the items the survivalists bring with them on the show.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nridges <- \n  loadouts |>\n  left_join(survivalists |> select(name, season, days_lasted)) |>\n  add_count(item) |>\n  mutate(\n    item = fct_lump_min(item, min = 3),\n    item = fct_reorder(item, n)\n  ) |>\n  ggplot(aes(days_lasted, item)) +\n  ggridges::geom_density_ridges(aes(fill = item), panel_scaling = F, show.legend = F, alpha = .8) +\n  labs(x = \"Days Lasted\", y = NULL)\n\ntotals <-\n  loadouts |> \n  mutate(item = fct_lump_min(item, min = 3)) |>\n  count(item) |> \n  mutate(item = fct_reorder(item, n)) |> \n  mutate(item = fct_relevel(item, \"Other\", after = 0)) |> \n  ggplot(aes(item, n)) +\n  geom_col(alpha = .8, aes(fill = item), show.legend = F) +\n  geom_label(aes(label = n), size = 3) +\n  coord_flip() +\n  labs(y = \"Total\", x = NULL) +\n  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())\n\nridges + totals\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWhile it's difficult to infer anything from these charts, there is evidence that items do have an effect on survival.\n\n### Repeated Contestants\n\nWe should also investigate the fact that in season 5, each contestant was a repeat survivalist. We should look at how each of them fared from their first attempt to their second.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  left_join(seasons |> select(season, location)) |> \n  filter(n() > 1, .by = name) |> \n  mutate(\n    attempt = str_glue(\"Attempt {rank(season)}\"), \n    slope = (days_lasted[attempt == \"Attempt 1\"] - days_lasted[attempt == \"Attempt 2\"]) / 2,\n    .by = name, days_lasted, location, .keep = \"used\"\n  ) |>\n  ggplot(aes(attempt, days_lasted, group = name)) + \n  geom_point(aes(shape = location), size = 2) +\n  geom_line(aes(color = slope > 0)) +\n  scale_color_manual(values = c(\"#00b545\", \"red\"), labels = c(\"Survived Longer\", \"Survived Shorter\")) +\n  labs(title = \"Repeat Survivalists\", x = NULL, y = \"Days Lasted\", shape = \"Location\", color = \"2nd Attempt\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIt's interesting that only roughly half of them survived longer on their 2nd attempt even accounting for location of their first attempt.\n\n### Prior Survival Experience\n\nLastly, let's look at how profession might affect survival time. Some contestants are \"Survival Experts\" or \"Hunting Guides\". So we will label them to have \"Prior Experience\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvivalists |> \n  mutate(prior_experience = profession |> str_detect(\"Surv|Wilderness|Hunt|Outdoor|Skills|Instructor\")) |> \n  ggplot(aes(prior_experience, days_lasted)) + \n  geom_boxplot(aes(fill = prior_experience), alpha = .5) +\n  ggrepel::geom_text_repel(\n    aes(label = profession), \n    direction = \"y\",\n    min.segment.length = 50,  \n    max.overlaps = 50, \n    position = position_jitter(width = .2, height = 0), \n    size = 2\n  ) +\n  coord_flip() +\n  labs(x = \"Prior Experience\", y = \"Days Lasted\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Machine Learning\n\nLet's build a model to predict survival time!\n\nFirst, we will prepare our data by selecting the necessary variables. We'll have to pivot the items data to get it into wide format so we can join with our survivalists data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitems_wide <- \n  loadouts |> \n  mutate(item = fct_lump_min(item, min = 3)) |>\n  mutate(present = 1) |> \n  pivot_wider(\n    id_cols = c(name, season), \n    names_from = item, \n    values_from = present,\n    values_fn = first,\n    values_fill = 0,\n    names_prefix = \"item_\"\n  )\n\nalone_clean <-\n  survivalists |> \n  left_join(seasons |> select(season, location)) |> \n  left_join(items_wide) |> \n  mutate(repeat_attempt = rank(season) > 1, .by = name) |> \n  select(\n    name, season, age, gender, location, days_lasted, team, country, profession, repeat_attempt, \n    starts_with(\"item_\")\n  )\n```\n:::\n\n\n\n\n### Train/Test Sets\n\nNext we will create our train/test sets, as well as some resamples. Since our data set is so small, we will use bootstrap resampling and we will stratify by season to ensure we sample across different survival conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n\nset.seed(234)\nalone_split <- initial_split(alone_clean, strata = season)\nalone_train <- training(alone_split)\nalone_test <- testing(alone_split)\n\nalone_boot <- bootstraps(alone_train, times = 10, strata = season)\n```\n:::\n\n\n### Feature Engineering\n\nMoving on to our feature engineering, we will create a few of the variables we've already explored.\n\nOne of my favorite pre-processing techniques to use when data includes a grouping structure is `step_lencode_mixed()` from the `{embed}` package. This step assigns a numeric value to our location variable by training a simple mixed model using the `{lme4}` package. This is better than dummy encoding because it accounts for differing group counts and will automatically assign a value close to the mean when a new location is encountered. Plus, it doesn't increase the number of dimensions of the data set as dummy encoding would.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalone_rec <- \n  recipe(\n    days_lasted ~ .,\n    data = alone_train\n  ) |> \n  update_role(name, new_role = \"id\") |> \n  update_role(season, new_role = \"season_id\") |> \n  step_mutate(\n    prior_experience = profession |> stringr::str_detect(\"Surv|Wilderness|Hunt|Outdoor|Skills|Instruct\"),\n    US_orig = country == \"United States\",\n    team = !is.na(team),\n    across(where(is.logical), factor)\n  ) |> \n  embed::step_lencode_mixed(location, outcome = vars(days_lasted)) |> \n  step_rm(profession, country) |> \n  step_dummy(all_factor_predictors())\n```\n:::\n\n\n### Model Training/Tuning\n\nLet's train a random forest regression model. We will tune and optimize for RMSE. Since it's a small data set, we will stick with relatively small numbers of trees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- \n  rand_forest(mtry = tune(), trees = tune()) |>\n  set_engine(\"ranger\") |> \n  set_mode(\"regression\")\n\nalone_wf <-\n  workflow() |>\n  add_recipe(alone_rec) |>\n  add_model(rf_spec)\n\nrf_grid <- \n  grid_regular(\n    mtry(c(5, 25)), \n    trees(c(10, 100)), \n    levels = c(mtry = 5, trees = 10)\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\n\nalone_res <-\n  alone_wf |>\n  tune_grid(\n    resamples = alone_boot,\n    grid = rf_grid,\n    control = control_resamples(allow_par = T, parallel_over = \"everything\")\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalone_res |> autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nTurns out this is a very hard problem to predict. Nevertheless, we will pick our best model and do one last fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_params <- alone_res |> select_best(metric = \"rmse\")\n\nset.seed(678)\n\nalone_final <- \n  alone_wf |> \n  update_model(rand_forest(mode = \"regression\") |> set_engine(\"ranger\", importance = \"permutation\")) |>\n  finalize_workflow(best_params) |> \n  last_fit(alone_split)\n```\n:::\n\n\n## Results\n\n### Final Performance Metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalone_final |> collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard      27.3   Preprocessor1_Model1\n2 rsq     standard       0.186 Preprocessor1_Model1\n```\n:::\n:::\n\n\nLooks like the final model's metrics were slightly better than our cross-validated metrics. This is probably because we got to train on the full training set.\n\n### Predictions\n\nNow we will compare our predictions against the true values from the test set. The dotted black line represents the formula `y = x`, which is where we'd hope all our predictions would lie.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalone_final |> \n  collect_predictions() %>%\n  inner_join(alone_clean |> slice(.$.row)) |> \n  ggplot(aes(.pred, days_lasted)) +\n  geom_point(aes(color = location, shape = location), size = 2) +\n  geom_abline(slope = 1, intercept = 0, lty = 2) +\n  labs(shape = NULL, color = NULL, x = \"Predicted Days Lasted\", y = \"Actual Days Lasted\") +\n  expand_limits(x = 0, y = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nThe good news is that there doesn't appear to be a whole lot of bias in our model (no systematic under or over predicting). However, our predictions tend to be quite far off most of the time.\n\n### Variable Importance\n\nTo finish things off, we'll look at the variable importances tracked by our model. It's important to note that permutation importance doesn't indicate direction of effect, only magnitude. Nonetheless, we can infer the probable direction by looking back at our EDA plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalone_final |> \n  extract_fit_engine() |>\n  vip::vip(n = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nUnsurprisingly we see that gender and location affect survival time. Interestingly, there are a few not so obvious items that appear to affect survival time. Perhaps trapping wire is a must to survive in the wild!\n\n## Conclusion & Discussion\n\nAfter exploring and modeling this data set, it's clear that it's quite difficult to predict how long contestants will last on the show. There are likely two main reasons for this. The first is that our sample is so limited. 9 seasons with 10 contestants each is no where near enough to extract robust and meaningful patterns. The second reason is that we don't have enough data on the existing contestants. Additional information that could be helpful include relationship status/family info, personality characteristics, and socio-economic status.\n\nMore detailed data about the locations could be helpful as well, such as time of year and weather patterns at drop-off time. Perhaps some of this information could be acquired from actually watching the show.\n\nThere's also the fact that there is likely some inconsistent bias that the producers of the show introduce when they select contestants. It's very possible that they select people differently each season based on viewership and popularity of prior seasons. This makes it difficult to detect potential patterns across seasons.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}