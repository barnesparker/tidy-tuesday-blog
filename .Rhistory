ggplot(aes(date, adj_close, color = stock_symbol)) +
geom_line() +
ggrepel::geom_label_repel(aes(peak_date, peak_price, label = stock_symbol), data = peak_price_dates, size = 3, vjust = -.75) +
scale_x_date(labels = scales::label_date_short(), breaks = "month") +
labs(
title = "Big Tech Stock Downfall",
x = NULL,
y = NULL
) +
theme(legend.position = "none")
stock_downfalls |>
ggplot(aes(date, adj_close, color = stock_symbol)) +
geom_line() +
ggrepel::geom_label_repel(aes(peak_date, peak_price, label = stock_symbol), data = peak_price_dates, size = 3, vjust = -.5) +
scale_x_date(labels = scales::label_date_short(), breaks = "month") +
labs(
title = "Big Tech Stock Downfall",
x = NULL,
y = NULL
) +
theme(legend.position = "none")
stock_downfalls |>
ggplot(aes(date, adj_close, color = stock_symbol)) +
geom_line() +
ggrepel::geom_label_repel(aes(peak_date, peak_price, label = stock_symbol), data = peak_price_dates, size = 3) +
scale_x_date(labels = scales::label_date_short(), breaks = "month") +
labs(
title = "Big Tech Stock Downfall",
x = NULL,
y = NULL
) +
theme(legend.position = "none")
big_tech_stock_prices |>
ggplot(aes(date, adj_close)) +
geom_line() +
facet_wrap(~stock_symbol, ncol = 4, scales = "free_y") +
theme_minimal()
usethis::edit_r_environ("project")
quarto publish quarto-pub
big_tech_stock_prices |>
filter(stock_symbol != "IBM") |>
slice_max(adj_close, by = stock_symbol) |>
ggplot(aes(date, adj_close, color = stock_symbol)) +
geom_point() +
ggrepel::geom_text_repel(aes(label = stock_symbol), size = 3, vjust = -.75) +
scale_x_date(labels = scales::label_date_short(), breaks = "month") +
labs(title = "Peak Stock Prices", x = NULL, y = NULL) +
theme(legend.position = "none")
quarto::quarto_render("posts/big-tech-stock/index.qmd")
getwd()
setwd("C:/Users/parkerb/Documents/Github/tidy-tuesday-blog/posts/big-tech-stock")
usethis::edit_r_environ()
usethis::edit_r_environ("project")
#| include: false
ggplot2::theme_set(ggplot2::theme_bw())
knitr::opts_chunk$set(
warning = F, message = F, echo = T
)
#| include: false
alone_board <- pins::board_folder("alone_board")
alone_res <- pins::pin_read(alone_board, "alone_res")
alone_board |> pins::pin_write(alone_clean, "alone_clean")
#| include: false
alone_board <- pins::board_folder("alone_board")
alone_res <- pins::pin_read(alone_board, "alone_res")
drugs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-14/drugs.csv')
View(drugs)
drugs |> DataExplorer::create_report()
numbats <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-07/numbats.csv')
View(numbats)
numbats |> count(scientificName)
library(tidyverse)
numbats |> count(scientificName)
numbats |> ggplot(aes(eventDate)) + geom_histogram()
numbats |> count(date = as_date(eventDate))
library(lubridate)
numbats |> count(date = as_date(eventDate))
numbats |> count(date = as_date(eventDate)) + geom_point()
numbats |> count(date = as_date(eventDate)) + ggplot(aes(date)) + geom_point()
numbats |> count(date = as_date(eventDate)) |>  ggplot(aes(date)) + geom_point()
numbats |> count(date = as_date(eventDate)) |>  ggplot(aes(date, n)) + geom_point()
numbats |> count(date = as_date(eventDate)) |> filter(date > "2000-01-01") |>  ggplot(aes(date, n)) + geom_point()
numbats |> count(date = as_date(eventDate)) |> filter(date > "2000-01-01") |>  ggplot(aes(date, n)) + geom_point() + geom_line()
numbats |> count(date = floor_date(as_date(eventDate), "month")) |> filter(date > "2000-01-01") |>  ggplot(aes(date, n)) + geom_point() + geom_line()
numbats |> count(date = floor_date(as_date(eventDate), "month")) |> filter(date > "2000-01-01") |>  ggplot(aes(date, n)) + geom_point() + geom_line() + geom_smooth()
numbats |> count(date = floor_date(as_date(eventDate), "month")) |> filter(date > "2000-01-01") |>  ggplot(aes(date, n)) + geom_point() + geom_line() + geom_smooth() + ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(date, fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
?complete
?full_seq
full_seq(c(today(), today() + days(10)), "day")
full_seq(c(today(), today() + days(10)), 1)
numbats |>
mutate(date = as_date(eventDate)) |>
complete(full_seq(c(min(date), max(date)), 1), fill = list(n = 0)) |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
mutate(date = as_date(eventDate)) |>
complete(full_seq(c(min(date), max(date)), 1), fill = list(n = 0))
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq(c(min(date), max(date)), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq(min(date), max(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq(min(date), max(date), "day"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq(min(date), max(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq.Date(min(date), max(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq.Date(max(date), min(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq.Date(max(date), min(date), "-1 month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01")
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |> pull(min(date))
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |> summarise(min(date))
seq.Date("2000-09-01", "2023-02-01", "month")
seq.Date(as_date("2000-09-01"), as_date("2023-02-01"), "month")
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(seq.Date(max(date), min(date), "-1 month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(date = seq.Date(min(date), max(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "year")) |>
filter(date > "2000-01-01") |>
complete(date = seq.Date(min(date), max(date), "year"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |>
count(date = floor_date(as_date(eventDate), "month")) |>
filter(date > "2000-01-01") |>
complete(date = seq.Date(min(date), max(date), "month"), fill = list(n = 0)) |>
ggplot(aes(date, n)) +
geom_point() +
geom_line() +
geom_smooth() +
ylim(0, 50)
numbats |> count(year = year(eventDate), month = month(eventDate, label = T))
numbats |>
count(year = year(eventDate), month = month(eventDate, label = T), sort = T)
numbats |>
count(year = year(eventDate), month = month(eventDate, label = T), sort = T) |> view()
numbats |> count(is.na(prcp))
numbats |> count(dataResourceName)
numbats |> count(dataResourceName, sort= T)
languages <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-21/languages.csv')
View(languages)
languages |> select(language_rank) |> filter(title == "Julia")
languages |> select(language_rank) |> filter(title == "Julia")
languages |> select(language_rank) |>
languages |> select(language_rank)
languages |> select(language_rank) |> dplyr::filter(title == "Julia")
languages |> select(language_rank, title) |> dplyr::filter(title == "Julia")
soccer <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-04/soccer21-22.csv')
View(soccer)
soccer |> count(Referee, sort = T)
library(tidyverse)
soccer |> count(Referee, sort = T)
soccer |> count(HTHG > HTAG, FTR == "H")
soccer |> count(Home_ahead_half = HTHG > HTAG, home_wins = FTR == "H")
?pivot_longer
#| include: false
ggplot2::theme_set(ggplot2::theme_minimal())
knitr::opts_chunk$set(
warning = F, message = F, echo = T
)
#| code-fold: false
# library(tidyverse)
box::use(
readr[read_csv],
tidyr[pivot_longer],
DT[datatable],
dplyr[...],
ggplot[...],
lubridate[as_date, yday],
scales[label_date]
)
#| code-fold: false
# library(tidyverse)
box::use(
readr[read_csv],
tidyr[pivot_longer],
DT[datatable],
dplyr[...],
ggplot2[...],
lubridate[as_date, yday],
scales[label_date]
)
#| include: false
ggplot2::theme_set(ggplot2::theme_minimal())
knitr::opts_chunk$set(
warning = F, message = F, echo = T
)
#| code-fold: false
# library(tidyverse)
box::use(
readr[read_csv],
tidyr[pivot_longer],
DT[datatable],
dplyr[...],
ggplot2[...],
lubridate[as_date, yday],
scales[label_date]
)
#| code-fold: false
snow <- read_csv("https://www.nrcs.usda.gov/Internet/WCIS/AWS_PLOTS/basinCharts/POR/WTEQ/assocHUCut3/state_of_utah.csv")
datatable(snow)
snow_long <-
snow |>
pivot_longer(
cols = `1981`:`2023`,
names_to = "year",
values_to = "snowpack",
values_drop_na = T
) |>
select(date, year, snowpack)
datatable(snow_long)
snow_long |>
ggplot(aes(date, snowpack, color = year)) +
geom_line()
snow_long |> pull(date) |> str()
snow_long |>
mutate(date = as_date(date, format = "%m-%d")) |>
ggplot(aes(date, snowpack, color = year)) +
geom_line()
snow_temp <-
snow_long |>
mutate(
date = as_date(date, format = "%m-%d") |> yday(),
date = if_else(date >= 275, as_date("2021-01-01") + date,
as_date("2022-01-01") + date)
)
snow_plot <-
snow_temp |>
ggplot(aes(date, snowpack, color = year)) +
geom_line() +
scale_x_date(labels = label_date("%b"), breaks = "month") +
labs(
title = "Utah Snowpack",
x = NULL,
y = "Snow Water Equivalent (in.)",
color = NULL
)
snow_plot
box::use(plotly[ggplotly])
ggplotly(snow_plot)
snow_plot2 <-
snow_temp |>
mutate(
tooltip = str_glue(
"{month(date, label = T, abbr = T)} {mday(date)}, {year}
Snowpack (in): {snowpack}"
)
) |>
ggplot(aes(date, snowpack, color = year, text = tooltip, group = year)) +
geom_line() +
scale_x_date(labels = label_date("%b"), breaks = "month") +
labs(
title = "Utah Snowpack",
x = NULL,
y = "Snow Water Equivalent (in.)",
color = NULL
)
ggplotly(snow_plot2, tooltip = "text")
create_snow_plot <- function(.interactive = T) {
snow_raw <- read_csv("https://www.nrcs.usda.gov/Internet/WCIS/AWS_PLOTS/basinCharts/POR/WTEQ/assocHUCut3/state_of_utah.csv")
snow_plot <-
snow_raw |>
mutate(
date = as_date(date, format = "%m-%d") |> yday(),
date = if_else(date >= 275, as_date("2021-01-01") + date,
as_date("2022-01-01") + date)
) |>
pivot_longer(`1981`:`2023`, names_to = "year", values_to = "snowpack") |>
mutate(
tooltip = str_glue(
"{month(date, label = T, abbr = T)} {mday(date)}, {year}
Snowpack (in): {snowpack}"
)
) |>
ggplot(aes(date, snowpack, color = year, text = tooltip, group = year)) +
geom_line() +
scale_x_date(labels = label_date("%b"), breaks = "month") +
labs(
title = "Utah Snowpack",
x = NULL,
y = "Snow Water Equivalent (in.)",
color = NULL
)
if (.interactive) {
ggplotly(snow_plot, tooltip = "text")
} else {
snow_plot
}
}
create_snow_plot(.interactive = T)
box::use(echarts4r[...])
snow_temp2 <-
snow_long |>
mutate(
day_of_year = as_date(date, format = "%m-%d") |> yday(),
year = as.numeric(year),
date = if_else(day_of_year >= 275,
as_date(str_glue("{year - 1}-01-01")) + day_of_year,
as_date(str_glue("{year}-01-01")) + day_of_year)
)
snow_temp2 |>
group_by(year) |>
e_charts(date, timeline = T) |>
e_area(snowpack) |>
e_tooltip("axis") |>
e_datazoom() |>
e_legend(show = F) |>
e_timeline_opts(top = "top") |>
e_y_axis(max = max(snow_temp$snowpack, na.rm = T) + 3)
snow_changes <-
snow_temp2 |>
mutate(daily_change = snowpack - lag(snowpack, order_by = date, default = 0)) |>
arrange(year, date)
snow_changes |>
select(snowpack, daily_change) |>
# for demonstration purposes
slice(200:205)
p1 <-
snow_changes |>
group_by(year) |>
e_charts(date, timeline = T, height = 300) |>
e_area(daily_change) |>
e_tooltip(trigger = "axis") |>
e_datazoom() |>
e_timeline_opts(show = F) |>
e_legend(right = "right", top = "50%") |>
e_group("snow") |>
e_connect_group("snow") |>
e_color("lightgreen") |>
e_y_axis(max = max(snow_changes$daily_change, na.rm = T), min = min(snow_changes$daily_change, na.rm = T))
p2 <-
snow_changes |>
group_by(year) |>
e_charts(date, timeline = T, height = 300) |>
e_area(snowpack) |>
e_tooltip(trigger = "axis") |>
e_datazoom() |>
e_timeline_opts(top = "top") |>
e_legend(right = "right", top = "50%") |>
e_group("snow") |>
e_y_axis(max = max(snow_changes$snowpack, na.rm = T) + 3)
e_arrange(p1, p2)
create_snow_plot <- function(title = "Utah Snowpack", .interactive = T) {
snow_raw <- read_csv("https://www.nrcs.usda.gov/Internet/WCIS/AWS_PLOTS/basinCharts/POR/WTEQ/assocHUCut3/state_of_utah.csv")
snow_plot <-
snow_raw |>
mutate(
date = as_date(date, format = "%m-%d") |> yday(),
date = if_else(date >= 275, as_date("2021-01-01") + date,
as_date("2022-01-01") + date)
) |>
pivot_longer(`1981`:`2023`, names_to = "year", values_to = "snowpack") |>
mutate(
tooltip = str_glue(
"{month(date, label = T, abbr = T)} {mday(date)}, {year}
Snowpack (in): {snowpack}"
)
) |>
ggplot(aes(date, snowpack, color = year, text = tooltip, group = year)) +
geom_line() +
scale_x_date(labels = label_date("%b"), breaks = "month") +
labs(
title = "Utah Snowpack",
x = NULL,
y = "Snow Water Equivalent (in.)",
color = NULL
)
if (.interactive) {
ggplotly(snow_plot, tooltip = "text")
} else {
snow_plot
}
}
create_snow_plot(title = paste("Utah Snowpack as of ", lubridate::today()))
paste("Utah Snowpack as of ", lubridate::today())
create_snow_plot(title = paste("Utah Snowpack as of", lubridate::today()))
create_snow_plot <- function(title = "Utah Snowpack", .interactive = T) {
snow_raw <- read_csv("https://www.nrcs.usda.gov/Internet/WCIS/AWS_PLOTS/basinCharts/POR/WTEQ/assocHUCut3/state_of_utah.csv")
snow_plot <-
snow_raw |>
mutate(
date = as_date(date, format = "%m-%d") |> yday(),
date = if_else(date >= 275, as_date("2021-01-01") + date,
as_date("2022-01-01") + date)
) |>
pivot_longer(`1981`:`2023`, names_to = "year", values_to = "snowpack") |>
mutate(
tooltip = str_glue(
"{month(date, label = T, abbr = T)} {mday(date)}, {year}
Snowpack (in): {snowpack}"
)
) |>
ggplot(aes(date, snowpack, color = year, text = tooltip, group = year)) +
geom_line() +
scale_x_date(labels = label_date("%b"), breaks = "month") +
labs(
title = title,
x = NULL,
y = "Snow Water Equivalent (in.)",
color = NULL
)
if (.interactive) {
ggplotly(snow_plot, tooltip = "text")
} else {
snow_plot
}
}
create_snow_plot(title = paste("Utah Snowpack as of", lubridate::today()))
?tune_grid
??tune_grid
?control_grid
??control_grid
renv::install("tune")
